
Los componentes te permiten dividir la interfaz del usuario (UI) en piezas reutilizables y piezas aisladas

Son como funciones de JS, aceptan inputs llamados "props" y retornan React Elements describiendo que es lo que

deberia aparecer en la pantalla 


La forma mas simple de definir un componente es escribir una funcion de JS 


        function Welcome(props){
            return <h1> Hello, {props.name} </h1>;
        }


Esta funcion es un componente de React valido ya que acepta un objeto "props" (que hace alusion a "properties")

con data y retorna un elemento de React 

Llamamos a estos componentes "function components" porque literalmente son funciones JS



Tambien se puede escribir como

        function Welcome extends React.Component {
            render(){
                return <h1> Hello, {this.porps.name}</h1>;
            }
        }




** Renderizando components ***


Podemos encontrar elementos React que presenten tags de DOM

        const element = <div  />

Pero tambien podemos encontrar componentes definidos por el usuario

        const element = <Welcome name ="sara"  />


Cuando React ve un elemento representando a un componente definido por el usuario, le pasa los atributos JSX y

los hijos a este componente, todo como un solo objeto. Y a este objeto lo llamamos "Props"


    function Welcome (props){
        
        return <h1> Hello, {props.name} </h1>;
    }

    const element = < Welcome name = "Sara" />

    ReactDOM.render(
        element,
        document.getElementById('root')
    )


1- llamamos a ReactDOM.render() con el elemento "element" que es "< Welcome name = "Sara" />"

2- React llama el componente Welcome con {name = "Sara"} como props 

3- Nuestro componente Welcome retorna un elemento <h1> Hello, Sara </h1> como resultado

4- El React DOM actualiza el DOM para que coincida con <h1> Hello, Sara </h1> 




** Componiendo components **


Components se pueden referir a otros components en sus outputs 

Los botones, formularios, un dialogo, una pantalla son comunmente expresados como components

Por ejemplo podemos crear una app que renderice Wlecome varias veces


        function Welcome(props){
            
            return <h1>Hello {props.name} </h1>;
        }

        function App(){
            return (
                <div>
                    < Welcome name="sara" />
                    < Welcome name="Lulu" />
                    < Welcome name="Pau" />
                </div>
            )
        }

        ReactDOM.render(
            <App />,
            document.getElementById('root')
        )



Usualmente las nuevas App con React tienen un solo componente "App" al principio, pero si integras una app existente

con React podes empezar desde abajo con un componente como un boton y gradualmente ir subiendo




** Extrayendo componentes **

Se puede dividir los components en components mas pequeños 


        function FormateDate(date){
            return date.toLocaleDateString();
        }

        function Comment(props){

            return(

                <div className="Comment">
                    <div className= "UserInfo">
                        <img
                            className= "Avatar"
                            src= {props.author.avatarUrl}
                            alt = {props.author.name}
                         />

                        <div className ="UserInfo-name" >
                            {props.author.name}
                        </div>
                    </div>

                    <div className= "CommentText" >
                        {FormateDate(props.date)}
                    </div>
                </div>
            )
        }

        const comment ={

            date: new Date(),

            text: "I hope you the best",

            author:{
                
                name:"Tomi",
                avatarUrl: 'https://placekitten.com/g/64/64'
            }
        }

        ReactDOM.render(
            <Comment 
                date= {comment.date}
                text= {comment.text}
                author= {comment.author}
            />,
            document.getElementById('root')
        )



Aca vemos que acepta objetos(Author), Strings (text) y dates como props

Este componente es complicado de reutilizar por todo el nesting y dificil de  utilizar cada parte por separado, para

esto podemos extraer componentes 


Primero vamos a extraer Avatar


        function Avatar(props){
            
            return(

                <img
                    
                    className= "Avatar"
                    src= {props.author.avatarUrl}
                    alt = {props.author.name}
                />
            )
        }


Se recomienda nombrar a los componentes bajo su propio punto de vista, no ponerlos en contexto, así es mas facil

utilizarlos luego

Una vez separado el componente Avatar podemos simplificar el codigo anterior 


        function Comment(props){

            return(
                
                <div className="Comment">
                    
                    <div className="UserInfo" >
                    
                        <Avatar user={props.author} />
                    
                        <div className="UserInfo-name" >
                    
                            {props.author.name}                
                    
                        </div>

                    </div>

                    <div className="CommentText" >
                    
                        {props.text}
                    
                    </div>

                    <div className="CommentDate" >
                        
                        {FormateDate(props.date)}
                    
                    </div>
                </div>
            )
        }


Luego lo que podemos hacer es extraer el componente "UserInfo" y asi renderizar al lado de UserInfo-name


        function UserInfo(props){
            
            return (

                <div className="UserInfo" >
                    <Avatar user={props.user} />
                    <div className="UserInfo-name" >
                        {props.user.name}
                    </div>
                </div>
            )
        }


Y simplificar aun mas nuestro component Comment


        function Avatar(props){

            return(

                <img 
                    className="Avatar" >
                    src= {props.user.AvatarUrl}
                    alt= {props.user.name}    
                />
            )
        };

        function UserInfo(props){

            return(

                <div className= "UserInfo">
                    
                    <Avatar user={props.user} />            //recorda que va de abajo para arriba, 
                    <div className= "UserInfo-name">        primero el ReactDOM.render() lee el elemento que pasemos                                        
                        {props.user.name}                   por eso podemos usar el props.user que despues declaramos
                    </div>
                </div>                                      
            )
        }


        function Comment(props){
            
            return(

                <div className= "Comment">
                    
                    <UserInfo user={props.author} />        //aca declaramos user para usarlo en los components de
                                                              arriba (UserInfo y Avatar)
                </div>
                
                <div className= "CommentText">

                    {props.text}

                </div>
            )
        }

        const comment ={
            
            text: "Hey there!",
          
            author:{
                name: "Tom",
                avatarUrl:"http://algoEscritoAsiNomas.com"
            }
        };


        ReactDOM.render(
            <Comment 
                text={comment.text},
                author={comment.author}
            />,
            document.getElementById('root')

        )




Asi declares tu components de React como una funcion o como una className, nunca deben modificar sus propias props

Existen las funciones "puras" y las "impuras" 

Las puras no cambian sus inputs y siempre devuelven los mismos resultados con los mismos inputs

ej:

        function sum (a,b){
            return a + b
        }


Una funcion impura si cambian el valor de sus inputs

ej:

        function sumatoria (account, amount){
            account.total += amount
        }



TODOS LOS COMPONENTES DE REACT DEBEN ACTUAR COMO FUNCIONES PURAS CON RESPECTO A SUS PROPS